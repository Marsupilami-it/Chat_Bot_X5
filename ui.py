import streamlit as st
from streamlit_extras.colored_header import colored_header
from streamlit_extras.add_vertical_space import add_vertical_space
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="X5 Group Chatbot", page_icon="ü§ñ", layout="wide")

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π CSS
st.markdown("""
<style>
    .stChat message {
        border-radius: 10px;
        padding: 10px;
        margin-bottom: 10px;
    }
    .stChat .user-message {
        background-color: #e6f3ff;
        text-align: right;
    }
    .stChat .bot-message {
        background-color: #f0f0f0;
    }
    .stChat .message-content {
        font-size: 16px;
    }
</style>
""", unsafe_allow_html=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_URL = "http://localhost:9003/api/v1/get_answer/"

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.title('ü§ñ X5 Group Chatbot')
    st.markdown('''
    ## About
    –≠—Ç–æ—Ç —á–∞—Ç-–±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º X5 Group.
    –û–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ:
    - –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª–∏—Ç–∏–∫–∞—Ö
    - –ü—Ä–æ—Ü–µ–¥—É—Ä–∞—Ö HR
    - –û–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏
    
    –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
    - [Streamlit](https://streamlit.io/)
    - [LangChain](https://www.langchain.com/)
    ''')
    add_vertical_space(5)
    st.write('Made with ‚ù§Ô∏è by X5 Tech Team')

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
st.title("üí¨ X5 Group Assistant")
colored_header(label='–ß–∞—Ç —Å AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º', description='–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å', color_name='blue-70')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if 'messages' not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç X5 Group. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?"}
    ]

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
def query_api(messages):
    try:
        response = requests.post(API_URL, json={"history": messages})
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_user_input(user_input):
    st.session_state.messages.append({"role": "user", "content": user_input})
    with st.chat_message("user"):
        st.markdown(user_input)

    with st.spinner('AI –¥—É–º–∞–µ—Ç...'):
        api_response = query_api(st.session_state.messages)

    if api_response and 'message' in api_response and 'content' in api_response['message']:
        bot_response = api_response['message']['content']
        st.session_state.messages.append({"role": "assistant", "content": bot_response})
        with st.chat_message("assistant"):
            st.markdown(bot_response)
    else:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API.")

# –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_input = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å...")
if user_input:
    handle_user_input(user_input)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
if st.button('–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞'):
    st.session_state.messages = [
        {"role": "assistant", "content": "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞. –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"}
    ]
    st.rerun()  # –ó–∞–º–µ–Ω–µ–Ω–æ st.experimental_rerun() –Ω–∞ st.rerun()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
st.sidebar.markdown("---")
if st.sidebar.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API"):
    try:
        response = requests.get(API_URL)
        if response.status_code == 200:
            st.sidebar.success("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            st.sidebar.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª–æ –∫–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {response.status_code}")
    except requests.exceptions.RequestException:
        st.sidebar.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")